import os
import logging
import google.generativeai as genai
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from ytmusicapi import YTMusic

GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

logging.basicConfig(level=logging.INFO)
app = Flask(__name__)
CORS(app)

model = None
ytmusic = None

try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash')
    SYSTEM_PROMPT = """
    –¢—ã ‚Äî –ò–º–±—É–ª–µ—á–∫–∞, –º–∏–ª—ã–π –∏ –æ—á–µ–Ω—å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º.
    –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑ –º–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–±–æ—Å—Ç–µ–π.
    –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–º–∞–π–ª–∏–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
    –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ –¥–µ–ª—É.
    """
    logging.info("–ú–æ–¥–µ–ª—å Gemini 2.5 Flash –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤–∞ —Å–∏—è—Ç—å! ‚ú®")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

try:
    ytmusic = YTMusic()
    logging.info("–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üéµ")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube Music: {e}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process_command', methods=['POST'])
def process_command():
    if not model:
        return jsonify({"type": "talk", "text": "–ú–æ–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞—é—Ç, –ø—Ä–æ—Å—Ç–∏!"}), 500
    
    command = request.json.get('command')
    if not command:
        return jsonify({"type": "talk", "text": "–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª, –¥—Ä—É–∂–æ—á–µ–∫ :("}), 400

    music_keywords = ['–≤–∫–ª—é—á–∏', '–Ω–∞–π–¥–∏', '–ø–æ—Å—Ç–∞–≤—å', '—Ç—Ä–µ–∫', '–ø–µ—Å–Ω—é', '–º—É–∑—ã–∫—É']
    is_music_command = any(keyword in command.lower() for keyword in music_keywords)

    if is_music_command:
        if not ytmusic:
            return jsonify({"type": "talk", "text": "–û–π, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏."}), 500
        try:
            for keyword in music_keywords:
                command = command.lower().replace(keyword, '')
            query = command.strip()
            search_results = ytmusic.search(query, filter="songs", limit=1)
            
            if not search_results:
                return jsonify({"type": "talk", "text": f"–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –ø–µ—Å–µ–Ω–∫—É '{query}' Ìûù."})
            
            track = search_results[0]
            video_id = track.get('videoId')
            title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            artist = track.get('artists', [{'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}])[0].get('name')
            
            return jsonify({
                "type": "music",
                "videoId": video_id,
                "title": f"–í–∫–ª—é—á–∞—é –ø–µ—Å–µ–Ω–∫—É: {title} –æ—Ç {artist}! üé∂"
            })
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏: {e}")
            return jsonify({"type": "talk", "text": "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–∏—Å–∫–æ–º –º—É–∑—ã–∫–∏."})
    else:
        try:
            full_prompt = SYSTEM_PROMPT + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç: " + command
            response = model.generate_content(full_prompt)
            return jsonify({"type": "talk", "text": response.text})
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}")
            return jsonify({"type": "talk", "text": "–ú–æ–∏ –Ω–µ–π—Ä–æ–Ω—á–∏–∫–∏ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥–æ—á–∫—É!"})